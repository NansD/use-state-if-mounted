{"version":3,"file":"static/webpack/static/development/pages/index.js.67c595c4b97d4bddb530.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import Head from \"next/head\";\n\nimport { useStateIfMounted } from \"../../use-state-if-mounted\";\nimport { toCamel } from \"../lib/util\";\n\nimport hookConfig from \"../../use-state-if-mounted/package.json\";\n\nexport default function Index() {\n  const { name, description, repository = {}, author = {} } = hookConfig;\n\n  const { name: authorName, url: authorUrl } = author;\n\n  const { url: repositoryUrl } = repository;\n  const repositoryExists = typeof repositoryUrl === \"string\";\n\n  const repositoryUrlDisplay =\n    repositoryExists && repositoryUrl.split(\"://\")[1];\n\n\n  const [count, setCount] = useStateIfMounted(0);\n  console.log('setCount :', setCount);\n\n  return (\n    <>\n      <Head>\n        <title>Hook - useStateIfMounted</title>\n        <meta property=\"og:title\" content=\"My page title\" key=\"title\" />\n      </Head>\n      <Head>\n        <meta property=\"og:title\" content=\"My new title\" key=\"title\" />\n      </Head>\n      <main>\n        <style jsx global>{`\n          body {\n            font-family: sans-serif;\n            padding: 0;\n            margin: 0;\n          }\n\n          main {\n            display: flex;\n            flex-direction: column;\n            justify-content: space-between;\n            padding: 1em 0;\n          }\n\n          h1 {\n            font-size: 2em;\n          }\n\n          img {\n            max-width: 100%;\n          }\n\n          pre {\n            overflow: auto;\n            max-height: 15em;\n            background-color: #eeeeee;\n            padding: 1em;\n          }\n\n          section,\n          footer {\n            width: 100%;\n            max-width: 50em;\n            margin: 0 auto;\n          }\n\n          footer p {\n            font-size: 0.9em;\n          }\n\n          footer p,\n          footer a {\n            color: #546e7a;\n          }\n        `}</style>\n\n        <section>\n          <h1>{toCamel(name)}</h1>\n\n          <p>{description}</p>\n\n          {repositoryExists && (\n            <p>\n              <a href={repositoryUrl}>{repositoryUrlDisplay}</a>\n            </p>\n          )}\n\n          <h2>How to use</h2>\n\n          <p>\n            Use this hook just like React's&nbsp;\n            <a href=\"https://reactjs.org/docs/hooks-reference.html#usestate\">\n              useState\n            </a>\n            .\n          </p>\n          <p>\n            This one hook only updates state if the component that called this\n            hook is mounted. This allows us to avoid memory leaks and messages\n            like this one :\n          </p>\n          <code>\n            Warning: Can't perform a React state update on an unmounted\n            component. This is a no-op, but it indicates a memory leak in your\n            application. To fix, cancel all subscriptions and asynchronous tasks\n            in a useEffect cleanup function. in Child (created by Holder)\n          </code>\n\n          <h2>Examples</h2>\n\n          <p>\n            <strong>Basic usage:</strong>\n          </p>\n          <pre>\n            <code>\n              {`\nconst [count, setCount] = useStateIfMounted(0);`}\n            </code>\n          </pre>\n          <p>\n            <strong>\"Real use case\" usage:</strong>\n          </p>\n          <p>\n            It's actually an <a href=\"https://stackoverflow.com/questions/56442582/react-hooks-cant-perform-a-react-state-update-on-an-unmounted-component\">issue</a> from Github.\n          </p>\n          <pre>\n            <code>\n              {`\nconst apiCall = n =>\nnew Promise(resolve => setTimeout(() => resolve(n + 1), 3000));\n\nconst ShowApiCallResult = () => {\nconst [n, setN] = useState(0);\nuseEffect(() => {\n  apiCall(n).then(newN => setN(newN));\n});\n\nreturn String(n);\n};\n\nconst RemoveComponentWithPendingApiCall = () => {\nconst [show, setShow] = useState(true);\nreturn (\n  <React.Fragment>\n    <button onClick={() => setShow(false)}>Click me</button>\n    {show && <ShowApiCallResult />}\n  </React.Fragment>\n);\n};\n`}\n            </code>\n          </pre>\n          <p>\n            The issue can be fixed with our hook like so :\n          </p>\n          <pre>\n            <code>\n              {`\nfunction Test() {\n  const [notSeenAmount, setNotSeenAmount] = useStateIfMounted(false)\n\n  useEffect(() => {\n      let timer = setInterval(updateNotSeenAmount, 2000) \n\n      return () => clearInterval(timer)\n  }, [])\n\n  async function updateNotSeenAmount() {\n      setNotSeenAmount(data) // no problem anymore !\n  }\n\n  async function anotherFunction() {\n    updateNotSeenAmount()\n  }\n\n  return <button onClick={updateNotSeenAmount}>Push me</button> //update can be triggered manually\n}`}\n            </code>\n          </pre>\n        </section>\n\n        <footer>\n          <p>\n            Made by <a href={authorUrl}>{authorName}</a>\n          </p>\n        </footer>\n      </main>\n    </>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;AACA;AATA;AAAA;AAAA;AAAA;AACA;AAYA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;A","sourceRoot":""}